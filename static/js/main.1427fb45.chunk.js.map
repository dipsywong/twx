{"version":3,"sources":["utils/readFile.ts","components/JsonTree.tsx","components/ClickShowRaw.tsx","utils/copyToClipboard.ts","utils/download.ts","components/EventShower.tsx","components/MissionInfoShower.tsx","components/JsonShower.tsx","components/TwfShower.tsx","pages/ReadTwfPage.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["readFile","target","file","a","Promise","resolve","reader","FileReader","addEventListener","result","readAsDataURL","readAsText","readAsArrayBuffer","readAsBinaryString","Error","readFileAsBinaryString","JsonTree","data","theme","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","ClickShowRaw","raw","defaultShow","name","useState","show","setShow","selected","color","backgroundColor","ButtonGroup","Button","onClick","style","undefined","marginLeft","str","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","copyToClipboard","JSON","stringify","text","filename","element","setAttribute","encodeURIComponent","display","click","download","EventShower","event","eventName","Accordion","AccordionSummary","expandIcon","aria-controls","id","Typography","AccordionDetails","Box","MissionInfoShower","inf","Grid","maxWidth","spacing","container","direction","item","n","dp","split","map","lineBreak","go","fa","cs","join","minp","sn","su","ab","ri","length","JsonShower","json","TwfShower","twf","useMemo","ini","rest","roles","allEvents","Object","entries","forEach","key","startsWith","push","replace","events","fromEntries","sort","b","uo","e","stopPropagation","height","margin","content","ReadTwfPage","setTwf","onDrop","useCallback","acceptedFiles","then","bs","pako","inflate","buf","TextDecoder","decode","s1","start","indexOf","end","lastIndexOf","slice","parse","useDropzone","getRootProps","getInputProps","flex","overflow","Container","marginBottom","flexDirection","justifyContent","alignContent","Paper","padding","App","position","top","left","right","bottom","AppBar","Toolbar","variant","href","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1427fb45.chunk.js","sourcesContent":["import pako from 'pako'\n\nconst readFile = (target: string) => async (file: Blob): Promise<string | ArrayBuffer | null | undefined> => new Promise((resolve) => {\n  const reader = new FileReader()\n  reader.addEventListener(\n    'load',\n    (reader) => (\n      resolve(reader?.target?.result)\n    )\n  )\n  switch (target) {\n    case 'readAsDataURL':\n    case 'dataURL':\n    case 'base64':\n      reader.readAsDataURL(file)\n      break\n    case 'readAsText':\n    case 'text':\n      reader.readAsText(file)\n      break\n    case 'buffer':\n    case 'arrayBuffer':\n    case 'readAsArrayBuffer':\n      reader.readAsArrayBuffer(file)\n      break\n    case 'bs':\n    case 'binaryString':\n    case 'readAsBinaryString':\n      reader.readAsBinaryString(file)\n      break\n    default:\n      throw new Error(`readFile received an unknown option ${target}`)\n  }\n})\n\nconst readFileAsDataURL: (file: File) => Promise<string> = readFile('readAsDataURL') as (file: File) => Promise<string>\nconst readFileAsText: (file: File) => Promise<string> = readFile('readAsText') as (file: File) => Promise<string>\nconst readFileAsArrayBuffer: (file: File) => Promise<ArrayBuffer> = readFile('readAsArrayBuffer') as (file: File) => Promise<ArrayBuffer>\nconst readFileAsBinaryString: (file: File) => Promise<string> = readFile('readAsBinaryString') as (file: File) => Promise<string>\nconst readTwxFileAsJson: <T>(file: File) => Promise<T> = (file: File) => (\n  readFileAsBinaryString(file)\n    .then(bs => pako.inflate(bs))\n    .then(buf => new TextDecoder('utf-8').decode(buf))\n    .then((s1 => {\n      const start = s1.indexOf('{')\n      const end = s1.lastIndexOf('}')\n      const s2 = s1.slice(start, end + 1).replace(/([,{])(\\d+):/g, '$1\"$2\":')\n      return s2\n      // return JSON.parse(s2)\n    }))\n    .then(JSON.parse)\n)\nexport default readFile\n\nexport {\n  readFileAsDataURL,\n  readFileAsText,\n  readFileAsArrayBuffer,\n  readFileAsBinaryString,\n  readTwxFileAsJson\n}\n","import React, { FunctionComponent } from 'react'\nimport JSONTree from 'react-json-tree'\n\nexport const JsonTree: FunctionComponent<{data: unknown}> = ({data}) => {\n  return (\n    <JSONTree data={data} theme={{\n          scheme: 'bright',\n          author: 'chris kempson (http://chriskempson.com)',\n          base00: '#000000',\n          base01: '#303030',\n          base02: '#505050',\n          base03: '#b0b0b0',\n          base04: '#d0d0d0',\n          base05: '#e0e0e0',\n          base06: '#f5f5f5',\n          base07: '#ffffff',\n          base08: '#fb0120',\n          base09: '#fc6d24',\n          base0A: '#fda331',\n          base0B: '#a1c659',\n          base0C: '#76c7b7',\n          base0D: '#6fb3d2',\n          base0E: '#d381c3',\n          base0F: '#be643c'\n    }}/>\n  )\n}\n","import { FunctionComponent, useState } from 'react'\nimport { Button, ButtonGroup } from '@material-ui/core'\nimport { JsonTree } from './JsonTree'\nimport { copyToClipboard } from '../utils/copyToClipboard'\nimport { download } from '../utils/download'\n\nexport const ClickShowRaw: FunctionComponent<{ raw: unknown, defaultShow?: number, name?: string }> = ({\n                                                                                                         raw,\n                                                                                                         defaultShow,\n                                                                                                         name\n                                                                                                       }) => {\n  const [show, setShow] = useState(defaultShow ?? 0)\n  const selected = {\n    color: `rgba(0, 0, 0, 0.54)`,\n    backgroundColor: `rgba(0, 0, 0, 0.12)`\n  }\n  return (\n    <>\n      <ButtonGroup>\n        <Button onClick={() => setShow(0)} style={show === 0 ? selected : undefined}>Hide JSON</Button>\n        <Button onClick={() => setShow(1)} style={show === 1 ? selected : undefined}>Tree JSON</Button>\n        <Button onClick={() => setShow(2)} style={show === 2 ? selected : undefined}>Raw JSON</Button>\n      </ButtonGroup>\n      <ButtonGroup style={{marginLeft: '8px'}}>\n        <Button onClick={() => copyToClipboard(JSON.stringify(raw, null, 2))}>Copy JSON</Button>\n        <Button\n          onClick={() => download(JSON.stringify(raw, null, 2), name !== undefined ? `${name}.json` : 'download.json')}>\n          Download JSON\n        </Button>\n      </ButtonGroup>\n      {show === 1 && <JsonTree data={raw}/>}\n      {show === 2 && (\n        <pre>\n          {JSON.stringify(raw, null, 2)}\n        </pre>\n      )}\n    </>\n  )\n\n}\n","export const copyToClipboard = (str: string): void => {\n  const el = document.createElement('textarea')\n  el.value = str\n  document.body.appendChild(el)\n  el.select()\n  document.execCommand('copy')\n  document.body.removeChild(el)\n}\n","export const download = (text: string, filename: string) => {\n  const element = document.createElement('a')\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text))\n  element.setAttribute('download', filename)\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n","import React, { FunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport { TwfEvent } from '../type'\nimport { ClickShowRaw } from './ClickShowRaw'\n\nexport const EventShower: FunctionComponent<{ event: TwfEvent, eventName: string }> = ({ event, eventName }) => {\n  return (\n    <Accordion>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon/>}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography>事件 {eventName}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Box>\n          <ClickShowRaw raw={event} defaultShow={1}/>\n        </Box>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import React, { FunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Grid, Typography } from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport { TwfInf } from '../type'\nimport { ClickShowRaw } from './ClickShowRaw'\n\nexport const MissionInfoShower: FunctionComponent<{ inf: TwfInf }> = ({ inf }) => {\n  return (\n    <Accordion>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon/>}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography>Mission Info</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Grid style={{maxWidth: '100%'}} spacing={1} container direction={'column'}>\n          <Grid item>mission name: {inf.n}</Grid>\n          <Grid item>mission description:</Grid>\n          <Grid style={{maxWidth: '100%'}}>\n            {inf.dp.split(/[\\n\\r]+/g).map(str => (\n              <div style={{lineBreak: 'auto', maxWidth: '100%'}}>{str}</div>\n            ))}\n          </Grid>\n          <Grid item>mission goal: {inf.go}</Grid>\n          <Grid item>mission fail: {inf.fa}</Grid>\n          <Grid item>camps: {inf.cs.join(',')}</Grid>\n          <Grid item>minplayers: {inf.minp}</Grid>\n          <Grid item>author: {inf.sn} ({inf.su})</Grid>\n          <Grid item>ability: {inf.ab}</Grid>\n          <Grid item>ri: {inf.ri.length > 0 ? inf.ri.join(',') : <i>none</i>}</Grid>\n          <ClickShowRaw raw={inf}/>\n        </Grid>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import React, { FunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport { ClickShowRaw } from './ClickShowRaw'\n\nexport const JsonShower: FunctionComponent<{ json: unknown, name: string }> = ({ json, name }) => {\n  return (\n    <Accordion>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon/>}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography>{name}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Box>\n          <ClickShowRaw raw={json} defaultShow={1}/>\n        </Box>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import React, { FunctionComponent, useMemo } from 'react'\nimport { Twf, TwfEvent, TwfRo } from '../type'\nimport { Box } from '@material-ui/core'\nimport { ClickShowRaw } from './ClickShowRaw'\nimport { EventShower } from './EventShower'\nimport { MissionInfoShower } from './MissionInfoShower'\nimport { JsonShower } from './JsonShower'\n\n\nexport const TwfShower: FunctionComponent<{ twf: Twf }> = ({ twf }) => {\n  const { inf, ini, map, roles, events } = useMemo(() => {\n    const { inf, ini, map, ...rest } = twf\n    const roles: Array<[string, TwfRo]> = []\n    const allEvents: Array<[string, TwfEvent]> = []\n    Object.entries(rest).forEach(([key, value]) => {\n      if (key.startsWith('ro')) {\n        roles.push([key, value as TwfRo])\n      } else {\n        allEvents.push([key.replace('evt_', ''), value as TwfEvent])\n      }\n    })\n    return {\n      roles,\n      inf,\n      ini,\n      map,\n      events: Object.fromEntries(allEvents.sort((a, b) => a[1].uo - b[1].uo))\n    }\n  }, [twf])\n  return (\n    <Box onClick={e => e.stopPropagation()} style={{ height: '100%' }}>\n      <Box style={{margin: '8px 0'}}>\n        <ClickShowRaw raw={twf} name={twf.inf.n}/>\n      </Box>\n      <MissionInfoShower inf={inf}/>\n      <JsonShower json={map} name='map'/>\n      <JsonShower json={ini} name='spawn point'/>\n      <JsonShower json={roles} name={`${roles.length} roles`}/>\n      {Object.entries(events).map(([name, content]) => (\n        <EventShower event={content} eventName={name}/>\n      ))}\n    </Box>\n  )\n}\n","import React, { useCallback, useState } from 'react'\nimport { Box, Container, Paper } from '@material-ui/core'\nimport { useDropzone } from 'react-dropzone'\nimport { readTwxFileAsJson } from '../utils/readFile'\nimport { Twf } from '../type'\nimport { TwfShower } from '../components/TwfShower'\n\n\nexport const ReadTwfPage = () => {\n  const [twf, setTwf] = useState<Twf | null>(null)\n  const onDrop = useCallback((acceptedFiles) => {\n    readTwxFileAsJson<Twf>(acceptedFiles[0])\n      .then(setTwf)\n  }, [])\n  const { getRootProps, getInputProps } = useDropzone({ onDrop })\n  return (\n    <Box style={{ flex: 1, overflow: 'auto' }} {...(twf === null ? getRootProps() : {})} >\n      <Container style={{ height: '100%', marginBottom: '16px' }}>\n        <input {...getInputProps()} />\n        {\n          // isDragActive ?\n          //   <p>Drop the files here ...</p> :\n          //   <p>Drag 'n' drop some files here, or click to select files</p>\n        }\n        {twf === null && <Box style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignContent: 'center',\n          height: '100%'\n        }}>\n          <Box>\n            <Paper style={{ padding: '30px' }}>\n              Drag and drop a twf file here, or click to open\n            </Paper>\n          </Box>\n        </Box>}\n        {twf !== null && <TwfShower twf={twf}/>}\n      </Container>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { AppBar, Box, Button, ButtonGroup, Toolbar, Typography } from '@material-ui/core'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport { ReadTwfPage } from '../pages/ReadTwfPage'\n\nfunction App () {\n  return (\n    <HashRouter>\n      <Box flexDirection='column' style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, display: 'flex' }}>\n        <AppBar position=\"static\">\n          <Toolbar style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Typography variant=\"h6\">\n              同人陣讀檔器\n            </Typography>\n            <ButtonGroup variant='text' color='inherit'>\n              <Button href={'//dipsy.me/twmap/'}>\n                舊讀檔器(twf,twm,twr,var,sav)\n              </Button>\n              <Button href={'//gamelet.online/'}>\n                嘎姆擂台\n              </Button>\n              <Button href={'//code.gamelet.com/'}>\n                Code.Gamelet\n              </Button>\n              <Button href={'https://light-up.gamelet.online/'}>\n                光影迷城\n              </Button>\n              <Button href={'https://poker99.gamelet.online/'}>\n                童話99\n              </Button>\n              <Button href={'https://magile.gamelet.online/'}>\n                魔法飛彈大作戰\n              </Button>\n            </ButtonGroup>\n          </Toolbar>\n        </AppBar>\n        <Switch>\n          <Route path=\"/\">\n            <ReadTwfPage/>\n          </Route>\n        </Switch>\n      </Box>\n    </HashRouter>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}